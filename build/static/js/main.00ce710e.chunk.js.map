{"version":3,"sources":["components/minter/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","hooks/useMinterContract.js","hooks/useMarketplaceContract.js","reportWebVitals.js","index.js"],"names":["Cover","name","coverImg","connect","className","style","background","minHeight","maxWidth","src","alt","Button","onClick","catch","e","console","log","variant","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","client","ipfsHttpClient","createNft","minterContract","marketplaceContract","performActions","price","description","ipfsImage","ownerAddress","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","createNFT","send","from","transaction","tokenCount","BigNumber","events","Transfer","returnValues","tokenId","NFTprice","ethers","utils","parseUnits","String","approve","NFTMarketplaceContractAddress","NFTMarketplace","listNFT","MyNFTContractAddress","MyNFT","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getListinglength","call","nftsLength","i","nft","Promise","resolve","getNFTListing","listing","tokenURI","res","fetchNftMeta","meta","index","seller","sold","canceled","push","Number","all","ipfsUrl","axios","get","buyNFT","value","error","cancelListing","AddNfts","save","setName","setPrice","setIpfsImage","setDescription","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Footer","disabled","NftCard","isSold","isOwner","isCanceled","Col","Card","Badge","bg","objectFit","Text","handleCancel","Loader","role","NftList","setNfts","loading","setLoading","getAssets","allNfts","addNft","toast","buy","cancelNFTListing","Add","Row","xs","sm","lg","map","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","MyNFTAbi","NFTMarketplaceAbi","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.00ce710e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div\r\n        className=\"d-flex justify-content-center flex-column text-center \"\r\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"mt-auto text-light mb-5\">\r\n          <div\r\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n            style={{ maxWidth: \"320px\" }}\r\n          >\r\n            <img src={coverImg} alt=\"\" />\r\n          </div>\r\n          <h1>{name}</h1>\r\n          <p>Please connect your wallet to continue.</p>\r\n          <Button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n            variant=\"outline-light\"\r\n            className=\"rounded-pill px-3 mt-3\"\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        </div>\r\n\r\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useContractKit } from '@celo-tools/use-contractkit';\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n\r\n    // get a contract interface to interact with\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\nimport NFTMarketplaceContractAddress from \"../contracts/NFTMarketplace-address.json\";\r\nimport { BigNumber, ethers } from \"ethers\";\r\n\r\n// initialize IPFS\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\n// mint an NFT\r\nexport const createNft = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  { name, price, description, ipfsImage, ownerAddress }\r\n) => {\r\n  await performActions(async (kit) => {\r\n    if (!name || !description || !ipfsImage) return;\r\n    const { defaultAccount } = kit;\r\n\r\n    // convert NFT metadata to JSON format\r\n    const data = JSON.stringify({\r\n      name,\r\n      description,\r\n      image: ipfsImage,\r\n      owner: defaultAccount,\r\n    });\r\n\r\n    try {\r\n      // save NFT metadata to IPFS\r\n      const added = await client.add(data);\r\n\r\n      // IPFS url for uploaded metadata\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n\r\n      // mint the NFT and save the IPFS url to the blockchain\r\n      let transaction = await minterContract.methods\r\n        .createNFT(url)\r\n        .send({ from: defaultAccount });\r\n\r\n      let tokenCount = BigNumber.from(transaction.events.Transfer.returnValues.tokenId);\r\n\r\n      const NFTprice = ethers.utils.parseUnits(String(price), \"ether\");\r\n      console.log(NFTprice);\r\n\r\n      await minterContract.methods\r\n        .approve(NFTMarketplaceContractAddress.NFTMarketplace, tokenCount)\r\n        .send({ from: kit.defaultAccount });\r\n\r\n      await marketplaceContract.methods\r\n        .listNFT(MyNFTContractAddress.MyNFT, NFTprice, tokenCount)\r\n        .send({ from: defaultAccount });\r\n\r\n      return transaction;\r\n    } catch (error) {\r\n      console.log(\"Error uploading file: \", error);\r\n    }\r\n  });\r\n};\r\n\r\n// function to upload a file to IPFS\r\nexport const uploadToIpfs = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (!file) return;\r\n  try {\r\n    const added = await client.add(file, {\r\n      progress: (prog) => console.log(`received: ${prog}`),\r\n    });\r\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  } catch (error) {\r\n    console.log(\"Error uploading file: \", error);\r\n  }\r\n};\r\n\r\n// fetch all NFTs on the smart contract\r\nexport const getNfts = async (minterContract, marketplaceContract) => {\r\n  try {\r\n    const nfts = [];\r\n    const nftsLength = await marketplaceContract.methods.getListinglength().call();\r\n    // contract starts minting from index 1\r\n    for (let i = 1; i <= Number(nftsLength); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        const listing = await marketplaceContract.methods.getNFTListing(i).call();\r\n        const res = await minterContract.methods.tokenURI(listing.tokenId).call();\r\n        const meta = await fetchNftMeta(res);\r\n        resolve({\r\n          index: i,\r\n          nft: listing.nft,\r\n          price: listing.price,\r\n          seller: listing.seller,\r\n          sold: listing.sold,\r\n          tokenId: listing.tokenId,\r\n          canceled: listing.canceled,\r\n          owner: meta.data.owner,\r\n          name: meta.data.name,\r\n          image: meta.data.image,\r\n          description: meta.data.description,\r\n        });\r\n      });\r\n      nfts.push(nft);\r\n    }\r\n    return Promise.all(nfts);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the metedata for an NFT from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const meta = await axios.get(ipfsUrl);\r\n    return meta;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the owner address of an NFT\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n  try {\r\n    return await minterContract.methods.ownerOf(index).call();\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the address that deployed the NFT contract\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n  try {\r\n    let owner = await minterContract.methods.owner().call();\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\nexport const buyNFT = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  index,\r\n  tokenId\r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      try {\r\n        console.log(marketplaceContract, index);\r\n        const { defaultAccount } = kit;\r\n        const listing = await marketplaceContract.methods.getNFTListing(index).call();\r\n        await marketplaceContract.methods\r\n          .buyNFT(index)\r\n          .send({ from: defaultAccount, value: listing.price });\r\n      } catch (error) {\r\n        console.log({ error });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n  \r\n\r\nexport const cancelListing = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  index,\r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      try {\r\n        console.log(marketplaceContract, index);\r\n        const { defaultAccount } = kit;\r\n        await marketplaceContract.methods\r\n          .cancelListing(index)\r\n          .send({ from: defaultAccount });\r\n      } catch (error) {\r\n        console.log({ error });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n  ","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../../utils/minter\";\r\n\r\n// basic attributes that can be added to NFT\r\n\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n\r\n\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n      name && ipfsImage && description;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n   \r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  \r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}\r\n      >\r\n        <i className=\"bi bi-plus\"></i>\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputPrice\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"Price\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setPrice(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                price,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address,\r\n\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddNfts.propTypes = {\r\n\r\n  // props passed into this component\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddNfts;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\n\r\nconst NftCard = ({ nft, buyNFT, cancelListing, isSold, isOwner, isCanceled }) => {\r\n  const { owner, price, image, description, name, index } = nft;\r\n\r\n\r\n\r\n  const handleCancel = (index)=>{\r\n    cancelListing(index);\r\n}\r\n\r\n\r\n  return (\r\n    <Col key={index}>\r\n      <Card className=\" h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {index} ID\r\n            </Badge>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {price / 10 ** 18} CELO\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n\r\n      \r\n         {isSold ? (\r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n              <button\r\n                className={`btn ${isOwner ? \"btn-danger\" : \"btn-secondary\"}`}\r\n              >\r\n                {isOwner ? \"Bought\" : \"Sold\"}\r\n              </button>\r\n            </div>\r\n          ) : (\r\n         \r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n            <button onClick={isCanceled === false ? buyNFT : null}className=\"btn btn-primary\">\r\n            {isCanceled ?  \"Listing Canceled\": \"Buy\"}\r\n            </button>\r\n          </div>    \r\n           )}\r\n      \r\n\r\n    {isOwner ? (\r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n              <button onClick={isCanceled === false ? ()=>handleCancel(index) : null} className=\"btn btn-primary\">\r\n                Cancel Listing\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n              <button className=\"btn btn-danger\">\r\n                Can't Cancel this Listing\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport { getNfts, createNft, buyNFT, cancelListing } from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst NftList = ({ minterContract, marketplaceContract, name }) => {\r\n  /* performActions : used to run smart contract interactions in order\r\n   *  address : fetch the address of the connected wallet\r\n   */\r\n  const { performActions, address } = useContractKit();\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getAssets = useCallback( async () => {\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all nfts from the smart contract\r\n      const allNfts = await getNfts(minterContract, marketplaceContract);\r\n      if (!allNfts) return;\r\n      setNfts(allNfts);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [marketplaceContract, minterContract]);\r\n\r\n  const addNft = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // create an nft functionality\r\n      await createNft(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        data\r\n      );\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const buy = async (index, tokenId) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      await buyNFT(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        index,\r\n        tokenId\r\n      );\r\n\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to buy an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const cancelNFTListing = async (index) => {\r\n    try {\r\n      setLoading(true);\r\n      await cancelListing(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        index,\r\n      );\r\n\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to cancel NFT listing.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getAssets();\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getAssets]);\r\n  if (address) {\r\n    return (\r\n      <>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\r\n\r\n              <AddNfts save={addNft} address={address} />\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n              {/* display all NFTs */}\r\n              {nfts.map((_nft) => (\r\n                <Nft\r\n                  key={_nft.index}\r\n                  buyNFT={() => buy(_nft.index, _nft.tokenId)}\r\n                  cancelListing={cancelNFTListing}\r\n                  nft={{\r\n                    ..._nft,\r\n                  }}\r\n                  isOwner={_nft.owner === address}\r\n                  isSold={_nft.sold}\r\n                  isCanceled={_nft.canceled}\r\n                />\r\n              ))}\r\n            </Row>\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n  // props passed into this component\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  marketplaceContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n  marketplaceContract: null,\r\n};\r\n\r\nexport default NftList;\r\n","import React from \"react\";\r\nimport Cover from \"./components/minter/Cover\";\r\nimport {Notification} from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport {useBalance, useMinterContract, useMarketplaceContract} from \"./hooks\";\r\nimport Nfts from \"./components/minter/nfts\";\r\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\r\nimport \"./App.css\";\r\nimport {Container, Nav} from \"react-bootstrap\";\r\n\r\nconst App = function AppWrapper() {\r\n  \r\n    const {address, destroy, connect} = useContractKit();\r\n    const {balance, getBalance} = useBalance();\r\n\r\n    // initialize the NFT mint contract\r\n    const minterContract = useMinterContract();\r\n\r\n     // initialize the NFT marketplace contract\r\n     const marketplaceContract = useMarketplaceContract();\r\n\r\n    return (\r\n        <>\r\n            <Notification/>\r\n\r\n            {address ? (\r\n                <Container fluid=\"md\">\r\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\r\n                        <Nav.Item>\r\n\r\n                            {/*display user wallet*/}\r\n                            <Wallet\r\n                                address={address}\r\n                                amount={balance.CELO}\r\n                                symbol=\"CELO\"\r\n                                destroy={destroy}\r\n                            />\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <main>\r\n\r\n                        {/*list NFTs*/}\r\n                        <Nfts\r\n                            name=\"Vintage Marketplace\"\r\n                            updateBalance={getBalance}\r\n                            minterContract={minterContract}\r\n                            marketplaceContract={marketplaceContract}\r\n                        />\r\n                    </main>\r\n                </Container>\r\n            ) : (\r\n                //  if user wallet is not connected display cover page\r\n                <Cover name=\"Vintage Marketplace\" coverImg=\"https://hooversun.com/downloads/26900/download/200227_Vintage_Market_Days9.jpg?cb=63b3080cc9c830a1020cd6404310bf70&w={width}&h={height}\" connect={connect}/>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const getBalance = useCallback(async () => {\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","import { useContract } from \"./useContract\";\r\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);","import { useContract } from \"./useContract\";\r\nimport NFTMarketplaceAbi from \"../contracts/NFTMarketplace.json\";\r\nimport NFTMarketplace from \"../contracts/NFTMarketplace-address.json\";\r\n\r\nexport const useMarketplaceContract = () =>\r\n  useContract(NFTMarketplaceAbi.abi, NFTMarketplace.NFTMarketplace);\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Vintage NFT Marketplace\",\r\n        description: \"A React Daap for  Vintage items\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}